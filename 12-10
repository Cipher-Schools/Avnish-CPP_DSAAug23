int shortestPath(vector<vector<int>> &arr, pair<int, int> source,
                     pair<int, int> destination) {
        if(source == destination){
            return 0;
        }
        queue<pair<pair<int, int>, int>> q;
        // q.front() => pair => pair(row, col), int(distance)
        int n = arr.size(), m = arr[0].size();
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));
        // dist[i][j] = x;
        q.push({{source.first, source.second}, 0});
        int dx[] = {1, 0, -1, 0};
        int dy[] = {0, 1, 0, -1};
        while(!q.empty()){
            int curRow = q.front().first.first;
            int curCol = q.front().first.second;
            int curDist = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++){
                int newRow = curRow + dx[i];
                int newCol = curCol + dy[i];
                if(newRow >= 0 and newCol >= 0 and newRow < n 
                and newCol < m and arr[newRow][newCol] == 1 and curDist + 1 < dist[newRow][newCol]){
                    dist[newRow][newCol] = curDist + 1;
                    if(newRow == destination.first and newCol == destination.second){
                        return curDist + 1;
                    }
                    q.push({{newRow, newCol}, curDist + 1});
                }
            }
        }
        return -1;
    }
    
    
    int wordLadderLength(string sword, string tword, vector<string>& arr) {
        set<string> s;
        for(string str: arr){
            s.insert(str);
        }
        if(s.find(tword) == s.end()){
            return 0;
        }
        queue<string> q;
        q.push(sword);
        int ans = 0;
        while(!q.empty()){
            ans++;
            int noOfWordsInCurDiff = q.size();
            while(noOfWordsInCurDiff--){
                string originalTop = q.front(); q.pop();
                for(int i = 0; i < originalTop.length(); i++){
                    string top = originalTop;
                    for(char ch = 'a'; ch <= 'z'; ch++){
                        top[i] = ch;
                        if(top == originalTop){
                            continue;
                        }
                        if(top == tword){
                            return ans + 1;
                        }
                        if(s.find(top) != s.end()){
                            q.push(top);
                            s.erase(top);
                        }
                    }
                }
            }
        }
        return 0;
    }
