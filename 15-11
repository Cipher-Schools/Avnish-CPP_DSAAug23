class Solution {
public:
    int bs(vector<int>& arr, int low, int high, int target){
        if(low <= high){
            int mid = (low + high) / 2;
            // int mid = (low + high) >> 1;
            if(arr[mid] == target){
                return mid;
            }
            if(arr[mid] < target){
                return bs(arr, mid + 1, high, target);
            }
            if(arr[mid] > target){
                return bs(arr, low, mid - 1, target);
            }
        }
        return high + 1;
    }
    int searchInsert(vector<int>& nums, int target) {
       return bs(nums, 0, nums.size() - 1, target); 
    }
};

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        nums.push_back(target);
        sort(nums.begin(), nums.end());
        return (lower_bound(nums.begin(), nums.end(), target) - nums.begin());
    }
};

class Solution {
public:
    int mySqrt(int x) {
        unsigned int ans = 0;
        while((ans * ans) <= x){
            if((ans * ans) == x){
                return ans;
            }
            ans++;
        }
        return (ans - 1);
    }
};

class Solution {
public:
    bool canBeIncreasing(vector<int>& arr) {
        int prev = arr[0];
        int flag = 0;
        for(int i = 1; i < arr.size(); i++){
            if(arr[i] <= prev){
                if(flag == 1){
                    return false;
                }
                flag = 1;
                if(i == 1 or arr[i] > arr[i - 2]){
                    prev = arr[i];
                }
            }
            else{
                prev = arr[i];
            }
        }
        return true;
    }
};
