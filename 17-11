class Solution {
public:
    int giveMask(string str){
        int mask = 0;
        for(char ch: str){
            int index = (ch - 'a');
            mask |= (1 << index);
        }
        return mask;
    }
    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {
        map<int, int> freqMask;
        for(string str: words){
            int mask = giveMask(str);
            freqMask[mask]++;
        }
        vector<int> ans;
        for(string puzz: puzzles){
            int mask = giveMask(puzz);
            int smallMask = mask;
            int first = (1 << (puzz[0] - 'a'));
            int cur = 0;
            while(smallMask){
                if(smallMask & first){
                    cur += freqMask[smallMask];
                }
                smallMask = (smallMask - 1) & mask;
            }
            ans.push_back(cur);
        }
        return ans;
    }
};


class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> ans;
        for(int i = 0; i < ((1 << n)); i++){
            ans.push_back((i ^ ((i >> 1))));
        }
        return ans;
    }
};

#include<bits/stdc++.h>
using namespace std;

vector<string> dfs(int n){
    if(n == 1){
        return {"0", "1"};
    }
    vector<string> temp = dfs(n - 1);
    vector<string> ans;
    for(int i = 0; i < temp.size(); i++){ // L -> R
        string cur = "0" + temp[i];
        ans.push_back(cur);
    }
    for(int i = temp.size() - 1; i >= 0; i--){ // R -> L
        string cur = "1" + temp[i];
        ans.push_back(cur);
    }
    return ans;
}

int main(){
    int n; cin >> n;
    vector<string> ans = dfs(n);
    for(string str: ans){
        cout << str << " ";
    }
    return 0;
}
