class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int candidate = 0;
        int votes = 0;
        for(int ele: nums){
            if(ele == candidate){
                votes++;
            }
            else{
                if(votes == 0){
                    candidate = ele;
                }
                else{
                    votes--;
                }
            }
        }
        return candidate;
    }
};
class Solution {
public:
    int romanToInt(string s) {
        map<char, int> m  = {
            {'I' , 1 } ,
            {'V' , 5 } ,
            {'X' , 10 } ,
            {'L' , 50 } ,
            {'C' , 100 } ,
            {'D' , 500 } ,
            {'M' , 1000 }
        };
        int n = s.length();
        // R - > L
        int ans = m[s[n - 1]];
        for(int i = n - 2; i >= 0; i--){
            if(m[s[i]] < m[s[i + 1]]){
                ans -= m[s[i]];
            }
            else{
                ans += m[s[i]];
            }
        }
        return ans;
    }
};
class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        priority_queue<int> pq;
        int num = 1;
        for(int i = 0; i < arr.size();){
            if(pq.size() == k){
                return pq.top();
            }
            if(arr[i] != num){
                pq.push(num);
            }
            else{
                i++;
            }
            num++;
        }
        while(pq.size() != k){
            pq.push(num++);
        }
        if(pq.size() == k){
            return pq.top();
        }
        return -1;
    }
};
