class bp{
    public:
        int ans;
        bool isBst;
        int mn;
        int mx;
        bp(){
            ans = 0;
            isBst = true;
            mn = INT_MAX;
            mx = INT_MIN;
        }
};
class Solution {
public:
    bp dfs(TreeNode* root, int& result){
        if(!root){ // null node check
            bp empty;
            return empty;
        }
        bp lc = dfs(root->left, result);
        bp rc = dfs(root->right, result);
        bp mc;
        if(lc.isBst and rc.isBst and root and root->val > lc.mx and root->val < rc.mn){
            mc.isBst = true;
            mc.ans = lc.ans + rc.ans + root->val;
            mc.mn = min({root->val, lc.mn, rc.mn});
            mc.mx = max({root->val, lc.mx, rc.mx});
        }
        else{
            // means it is not a bst
            // 1-> lc is not a bst
            // 2-> rc is not a bst
            // 3-> root->val > lc.mx and root->val < rc.mn this is false
            mc.isBst = false;
            mc.ans = max(lc.ans, rc.ans);
        }
        result = max(result, mc.ans);
        return mc;
    }
    int maxSumBST(TreeNode* root) {
        int result = 0;
        dfs(root, result);
        return result;
    }
};

class Solution {
public:
    int dfs(TreeNode* root, int& ans){
        if(!root){ // for null
            return -1;
        }
        if(!root->left and !root->right){ // for leaf node
            return 0;
        }
        // longest path len in terms of edges keeping in mind all nodes in this path have the same value
        // that length doesnot invlove the interaction with root node
        int lc = dfs(root->left, ans);
        int rc = dfs(root->right, ans);
        if(root and root->left and root->right
            and root->val == root->left->val
            and root->val == root->right->val){
            ans = max(ans, lc + rc + 2);
            return max(lc, rc) + 1;
        }
        else if(root and root->left and root->val == root->left->val){
            ans = max(ans, lc + 1);
            return (lc + 1);
        }
        else if(root and root->right and root->val == root->right->val){
            ans = max(ans, rc + 1);
            return (rc + 1);
        }
        return 0;
    }
    int longestUnivaluePath(TreeNode* root) {
        int ans = 0;
        dfs(root, ans);
        return ans;
    }
};
