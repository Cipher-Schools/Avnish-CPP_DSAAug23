22-08
If you have any doubts or confusion do let me know.
Keep Learning

#include<iostream>
using namespace std;

void print(int arr[], int n, int start = 0){
    if(start == n){
        return ;
    }
    //cout << arr[start] << " "; // left to right
    print(arr, n, start + 1);
    cout << arr[start] << " "; // right to left
}

int main(){
    int arr[3] = {1, 10, 45};
    print(arr, 3);
    return 0;
}


#include<iostream>
using namespace std;


bool palin(string str){
    int n = str.length();
    int start = 0;
    int end = n - 1;
    while(start < end){
        if(str[start++] != str[end--]){
            return false;
        }
    }
    return true;
}

int main(){
    string str; cin >> str;
    if(palin(str)){
        cout << "Yes they are palin";
    }
    else{
        cout << "not";
    }
    return 0;
}



#include <iostream> 
using namespace std; 

bool pal(string s, int st, int end)
{
    if(st>=end)
    return true;
    if(s[st] != s[end])
    return false;
    
    return pal(s, st+1, end-1);
}
int main() { 
    string s;
    cin>>s;
    cout<<"is pal: "<<pal(s, 0, s.size()-1);
    
    return 0;
}

#include<iostream>
using namespace std;


bool palin(string str){ //iterative
    int n = str.length();
    int start = 0;
    int end = n - 1;
    while(start < end){
        if(str[start++] != str[end--]){
            return false;
        }
    }
    return true;
}

bool recursivePalin(string str, int start, int end){
    if(start >= end){
        return true;
    }
    
    
    if(str[start] != str[end]){
        return false;
    }
    else{
        return recursivePalin(str, start + 1, end - 1);
    }
}

int main(){
    string str; cin >> str;
    int n = str.length();
    if(recursivePalin(str, 0, n - 1)){
        cout << "Yes they are palin";
    }
    else{
        cout << "not";
    }
    return 0;
}


#include<iostream>
using namespace std;


bool palin(string str){ //iterative
    int n = str.length();
    int start = 0;
    int end = n - 1;
    while(start < end){
        if(str[start++] != str[end--]){
            return false;
        }
    }
    return true;
}

bool recursivePalin(string str, int start, int end){
    if(start >= end){
        return true;
    }
    
    
    if(str[start] != str[end]){
        return false;
    }
    else{
        return recursivePalin(str, start + 1, end - 1);
    }
}

int main(){
    string str = "ilovecoding";
    int n = str.length();
    string part = str.substr(2, 1);
    cout << part;
    return 0;
}

#include <iostream> 
using namespace std; 

int binSearch(int a[], int n, int st, int end, int tar)
{
    if(st>end)
        return -1;
    int md = (st+end)/2;
    if(a[md] == tar)
        return md;
    if(a[md]>tar)
        return binSearch(a, n, st, md-1, tar);
    else
        return binSearch(a, n, md+1, end, tar);
}


int main() { 
    int n; cin>>n;
    int a[n];
    for(int i=0;i<n;i++) cin>>a[i];
    int tar; cin>>tar;
    
    int st = 0, end = n-1;
    int ans = binSearch(a, n, st, end, tar);
    
    cout<<"index: "<<ans;
    
    return 0;
}


#include <bits/stdc++.h>
using namespace std;



int main() {
    int n; cin>>n;
    vector<int> arr(n);
    for(int &i: arr){
        cin >> i;
    }
    int target; cin >> target;
    int first = lower_bound(arr.begin(), arr.end(), target) - arr.begin();
    int second = upper_bound(arr.begin(), arr.end(), target) - arr.begin(); // x
    second--;
    cout << first << " " << second << " freq = " << (second - first + 1);
    return 0;
}


class Solution {
public:
    int firstIndex(vector<int>& arr, int target){
        int n = arr.size();
        int start = 0;
        int end = n - 1;
        int possibleans = n; // -1
        while(start <= end){
            int mid = (start + end) / 2;
            if(arr[mid] >= target){
                possibleans = mid;
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return possibleans;
    }
    int lastIndex(vector<int>& arr, int target){
        int n = arr.size();
        int start = 0;
        int end = n - 1;
        int possibleans = n; // -1
        while(start <= end){
            int mid = (start + end) / 2;
            if(arr[mid] > target){
                possibleans = mid;
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return possibleans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = firstIndex(nums, target);
        int n = nums.size();
        if(first == n or nums[first] != target){
            return {-1, -1};
        }
        int last = lastIndex(nums, target);
        return {first, last - 1};
    }
};


#include <bits/stdc++.h>
using namespace std;



int main() {
    vector<int> arr;
    arr.push_back(10);
    arr.push_back(11);
    arr.push_back(12);
    arr.push_back(13);
    int n = arr.size();
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    cout << endl;
    arr.pop_back();
    n = arr.size();
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    arr.pop_back();
    int size = sizeof(arr);
    cout << endl <<  n;
    return 0;
}

