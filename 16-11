class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string>> m;
        for(string str: strs){
            string sortedStr = str;
            sort(sortedStr.begin(), sortedStr.end());
            // m[sortedkey] = values;
            m[sortedStr].push_back(str);
        }
        return 
    }
};
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int low = 0;
        int high = arr.size() - 1;
        while(low < high){
            int mid = (low + high) >> 1;
            if(arr[mid] < arr[mid + 1]){
                low = mid + 1;
            }
            else{
                high = mid;
            }
        }
        return low; or high
    }
};

class Solution {
public:
    void dfs(TreeNode* &root, set<int>& s, vector<TreeNode*>& ans){
        if(root != NULL){
            dfs(root->left, s, ans);
            dfs(root->right, s, ans);
            if(s.find(root->val) != s.end()){
                if(root->left){
                    ans.push_back(root->left);
                }
                if(root->right){
                    ans.push_back(root->right);
                }
                root = NULL;
                delete root;
            }
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        set<int> s;
        for(int ele: to_delete){
            s.insert(ele);
        }
        vector<TreeNode*> ans;
        dfs(root, s, ans);
        if(root){
            ans.push_back(root);
        }
        return ans;
    }
};
