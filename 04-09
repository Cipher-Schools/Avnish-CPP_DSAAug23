// 04-09
// If you have any doubts or confusion do let me know.
// Keep Learning


#include<bits/stdc++.h>
using namespace std;

struct PriorityQueue{
  int value;
  int priority;
};

PriorityQueue PQ[5];
int pos = -1; // we havenot started the work so far

void enQueue(int value, int priority){
    pos++;
    PQ[pos].value = value;
    PQ[pos].priority = priority;
}
int peek(){
    int ansIndex = -1; // store the index of Most valueable data packet
    int ansPriority = INT_MIN;//store the most valualbe watage
    for(int i = 0; i <= pos; i++){
        if(ansPriority == PQ[i].priority and ansIndex > -1 and PQ[ansIndex].value < PQ[i].value){
            ansIndex = i;
        }
        else if(ansPriority < PQ[i].priority){
            ansIndex = i;
            ansPriority = PQ[i].priority;
        }
    }
    return ansIndex;
}

void deQueue(){
    int mostPQIndex = peek();
    for(int i = mostPQIndex; i < pos; i++){
        PQ[i] = PQ[i + 1];
    }
    pos--;
}
void show(){
    for(int i = 0; i <= pos; i++){
        cout << "Index = " << i << " having prio = " << PQ[i].priority << " and having data = " << PQ[i].value << endl;
    }
}


int main(){
    enQueue(10, 0);
    enQueue(14, 9);
    enQueue(101, 1);
    enQueue(120, 7);
    enQueue(10000, 11);
    cout << PQ[peek()].value << endl;
    deQueue();
    cout << PQ[peek()].value;
    return 0;
}



#include<bits/stdc++.h>
using namespace std;

void menu(){
    cout << "1-enQueue\n";
    cout << "2-deQueue\n";
    cout << "3-peek\n";
    cout << "4-show\n";
}

class Node{
    public:
        int data;
        int priority;
        Node* next;
        Node(int data, int priority){
            this->data = data;
            this->priority = priority;
            this->next = NULL;
        }
};
class PriorityQueue{
    Node* head;
    public:
        PriorityQueue(){
            head = NULL;
        }
        void show(){
            Node* cur = head;
            while(cur){
                cout << cur->data << " ";
                cur = cur->next;
            }
            cout << "\n";
        }
        void enQueue(int data, int priority){
            Node* newNode = new Node(data, priority);
            if(!head){
                head = newNode;
                return ;
            }
            if(head and head->priority < priority){
                newNode->next = head;
                head = newNode;
                return;
            }
            Node* cur = head;
            while(cur->next and cur->priority > priority){
                cur = cur->next;
            }
            newNode->next = cur->next;
            cur->next = newNode;
        }
        Node* peek(){
            return head;
        }
        void deQueue(){
            Node* nodeToDelete = head;
            head = (head ? head->next : head);
            free(nodeToDelete);
        }
};
int main(){
    PriorityQueue pq;
    while(true){
        menu();
        int choice; cin >> choice;
        if(choice == 1){
            int data; cin >> data;
            int priority; cin >> priority;
            pq.enQueue(data, priority);
        }
        else if(choice == 2){
            pq.deQueue();
        }
        else if(choice == 3){
            cout << (pq.peek() ? to_string(pq.peek()->data) : "empty") << "\n";
        }
        else if(choice == 4){
            pq.show();
        }
        else{
            cout << "Bye\n";
            break;
        }
    }
    return 0;
}
