class Solution {
public:
    vector<int> decode(vector<int>& encoded, int first) {
        int n = encoded.size();
        vector<int> ans (n + 1);
        ans[0] = first;
        for(int i = 0; i < n; i++){
            ans[i + 1] = ans[i] ^ encoded[i];
        }
        return ans;
    }
};

class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        time = linear o(max(n, m));
        
        int freq[200] = {0};
        for(char ch: stones){
            freq[ch]++;
        }
        int ans = 0;
        aaaa
        for(int i = 0; i < jewels.length(); i++){
            if(freq[ch] == -1){
            
            }
            char ch = jewels[i];
            ans += freq[ch];
            freq[ch] = -1;
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> ans(nums.size());
        int n = nums.size();
        for(int i = 0; i < n; i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> getConcatenation(vector<int>& nums) {
        vector<int> ans;
        for(int i: nums){
            ans.push_back(i);
        }
        for(int i: nums){
            ans.push_back(i);
        }
        return ans;
    }
};
