void shortest_distance(vector<vector<int>>&arr){
    int i, j, k;
    int n = arr.size();
    for(i = 0; i < n; i++){
        for(j = 0; j < n; j++){
            if(arr[i][j] == -1){
                arr[i][j] = INT_MAX;
            }
        }
    }
    n*n*n => n^3
    for(k = 0; k < n; k++){ // k => via > N
        for(i = 0; i < n; i++){ // i => source > N
            for(j = 0; j < n; j++){ // j => destination > N
                if(arr[i][j] > arr[i][k] + arr[k][j]
                [source][dest] > [source][via] + [via][destination]
                && arr[i][k] != INT_MAX && arr[k][j] != INT_MAX){
                    arr[i][j] = arr[i][k] + arr[k][j];
                }
            }
        }
    }
    for(i = 0; i < n; i++){
        for(j = 0; j < n; j++){
            if(arr[i][j] == INT_MAX){
                arr[i][j] = -1;
            }
        }
    }
}

class Solution {
public:
    void dfs(int src, vector<int> adj[], vector<int>& visited, stack<int>& topo){
        visited[src] = 1;
        for(int child: adj[src]){
            if(visited[child] == false){
                dfs(child, adj, visited, topo);
            }
        }
        topo.push(src);
    }
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        int n = rooms.size();
        vector<int> adj[n];
        int roomNumber = 0;
        for(vector<int> child: rooms){
            for(int node: child){
                adj[roomNumber].push_back(node);
            }
            roomNumber++;
        }
        vector<int> visited(n, 0);
        stack<int> topo;
        dfs(0, adj, visited, topo);
        if(topo.size() == n){
            return true;
        }
        return false;
    }
};

