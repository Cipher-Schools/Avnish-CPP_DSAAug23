18-08-2023
If you have any doubts or confusion do let me know.
Keep Learning

#include<bits/stdc++.h>
using namespace std;

int main(){
    int n; cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    sort(arr, arr + n);
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    return 0;
}



#include<bits/stdc++.h>
using namespace std;

void mergeArray(int arr1[], int n, int arr2[], int m, int newArray[], int newArraySize){
    int left = 0;
    int right = 0;
    int startPointForNewArray = 0;
    while(left < n and right < m){
        if(arr1[left] < arr2[right]){
            //you will choose arr1 ele
            newArray[startPointForNewArray] = arr1[left];
            left++;
            startPointForNewArray++;
        }
        else{
            // for arr2
            newArray[startPointForNewArray] = arr2[right];
            right++;
            startPointForNewArray++;
        }
    }
    while(left < n){
        newArray[startPointForNewArray] = arr1[left];
        left++;
        startPointForNewArray++;
    }
    while(right < m){
        newArray[startPointForNewArray] = arr2[right];
        right++;
        startPointForNewArray++;
    }
}


int main(){
    int n; cin >> n;
    int arr1[n];
    for(int i = 0; i < n; i++){
        cin >> arr1[i];
    }
    int m; cin >> m;
    int arr2[m];
    for(int i = 0; i < m; i++){
        cin >> arr2[i];
    }
    int newArray[n + m];
    mergeArray(arr1, n, arr2, m, newArray, n + m);
    for(int i = 0; i < n + m; i++){
        cout << newArray[i] << " ";
    }
    cout << "\n";
    // work copy the ele from new Array to resp. arr1, arr2
    for(int i = 0; i < n; i++){
        arr1[i] = newArray[i];
    }
    for(int j = 0; j < m; j++){
        arr2[j] = newArray[n + j];
    }
    for(int i = 0; i < n; i++){
        cout << arr1[i] << " ";
    }
    cout << "\n";
    for(int i = 0; i < m; i++){
        cout << arr2[i] << " ";
    }
    return 0;
}



#include<bits/stdc++.h>
using namespace std;

int giveDistance(int size){
    if(size  <= 1){
        return 0;
    }
    return (size / 2) + (size % 2);
}

void mergeArr(int arr1[], int n, int arr2[], int m){
    int j, i, distance = n + m;
    for(distance = giveDistance(distance); distance > 0; distance = giveDistance(distance)){
        for(i = 0; i + distance < n; i++){
            if(arr1[i] > arr1[i + distance]){
                swap(arr1[i], arr1[i + distance]);
            }
        }
        for(j = distance > n ? distance - n : 0; i < n and  j < m; i++, j++){
            if(arr1[i] > arr2[j]){
                swap(arr1[i], arr2[j]);
            }
        }
        if(j < m){
            for(j = 0; j + distance < m; j++){
                if(arr2[j] > arr2[j + distance]){
                    swap(arr2[j], arr2[j + distance]);
                }
            }
        }
    }
}


int main(){
    int n; cin >> n;
    int arr1[n];
    for(int i = 0; i < n; i++){
        cin >> arr1[i];
    }
    int m; cin >> m;
    int arr2[m];
    for(int i = 0; i < m; i++){
        cin >> arr2[i];
    }
    mergeArr(arr1, n, arr2, m);
    for(int i = 0; i < n; i++){
        cout << arr1[i] << " ";
    }
    cout << "\n";
    for(int i = 0; i < m; i++){
        cout << arr2[i] << " ";
    }
    return 0;
}
